//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from QoreDB/QueryEngine/Parser/Sql.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QoreDB.QueryEngine.Parser.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHERE=1, ORDER=2, BY=3, ASC=4, DESC=5, CREATE=6, TABLE=7, DROP=8, SELECT=9, 
		FROM=10, INSERT=11, INTO=12, VALUES=13, ASTERISK=14, IF=15, EXISTS=16, 
		LIMIT=17, OFFSET=18, AND=19, OR=20, JOIN=21, ON=22, LEFT=23, RIGHT=24, 
		INNER=25, EQUAL=26, GREATER_THAN=27, LESS_THAN=28, GTE=29, LTE=30, PLUS=31, 
		MINUS=32, SLASH=33, ID=34, STRING_LITERAL=35, NUMBER=36, COMMA=37, LPAREN=38, 
		RPAREN=39, SEMI=40, WS=41, COMMENT=42;
	public const int
		RULE_root = 0, RULE_statement = 1, RULE_insert_statement = 2, RULE_select_statement = 3, 
		RULE_table_source = 4, RULE_join_clause = 5, RULE_join_operator = 6, RULE_create_table_statement = 7, 
		RULE_drop_table_statement = 8, RULE_where_clause = 9, RULE_order_by_clause = 10, 
		RULE_limit_clause = 11, RULE_expression = 12, RULE_boolean_expression = 13, 
		RULE_comparison_expression = 14, RULE_additive_expression = 15, RULE_multiplicative_expression = 16, 
		RULE_primary_expression = 17, RULE_column_definitions = 18, RULE_column_def = 19, 
		RULE_column_list = 20, RULE_value_list = 21, RULE_value = 22;
	public static readonly string[] ruleNames = {
		"root", "statement", "insert_statement", "select_statement", "table_source", 
		"join_clause", "join_operator", "create_table_statement", "drop_table_statement", 
		"where_clause", "order_by_clause", "limit_clause", "expression", "boolean_expression", 
		"comparison_expression", "additive_expression", "multiplicative_expression", 
		"primary_expression", "column_definitions", "column_def", "column_list", 
		"value_list", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'WHERE'", "'ORDER'", "'BY'", "'ASC'", "'DESC'", "'CREATE'", "'TABLE'", 
		"'DROP'", "'SELECT'", "'FROM'", "'INSERT'", "'INTO'", "'VALUES'", "'*'", 
		"'IF'", "'EXISTS'", "'LIMIT'", "'OFFSET'", "'AND'", "'OR'", "'JOIN'", 
		"'ON'", "'LEFT'", "'RIGHT'", "'INNER'", "'='", "'>'", "'<'", "'>='", "'<='", 
		"'+'", "'-'", "'/'", null, null, null, "','", "'('", "')'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHERE", "ORDER", "BY", "ASC", "DESC", "CREATE", "TABLE", "DROP", 
		"SELECT", "FROM", "INSERT", "INTO", "VALUES", "ASTERISK", "IF", "EXISTS", 
		"LIMIT", "OFFSET", "AND", "OR", "JOIN", "ON", "LEFT", "RIGHT", "INNER", 
		"EQUAL", "GREATER_THAN", "LESS_THAN", "GTE", "LTE", "PLUS", "MINUS", "SLASH", 
		"ID", "STRING_LITERAL", "NUMBER", "COMMA", "LPAREN", "RPAREN", "SEMI", 
		"WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_statementContext create_table_statement() {
			return GetRuleContext<Create_table_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_table_statementContext drop_table_statement() {
			return GetRuleContext<Drop_table_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INSERT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				insert_statement();
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				select_statement();
				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				create_table_statement();
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51;
				drop_table_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public IToken table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(SqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(SqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(SqlParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(SqlParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(SqlParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(SqlParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(SqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_listContext value_list() {
			return GetRuleContext<Value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(SqlParser.SEMI, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_insert_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(INSERT);
			State = 55;
			Match(INTO);
			State = 56;
			_localctx.table_name = Match(ID);
			State = 57;
			Match(LPAREN);
			State = 58;
			column_list();
			State = 59;
			Match(RPAREN);
			State = 60;
			Match(VALUES);
			State = 61;
			Match(LPAREN);
			State = 62;
			value_list();
			State = 63;
			Match(RPAREN);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 64;
				Match(SEMI);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(SqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(SqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(SqlParser.SEMI, 0); }
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(SELECT);
			State = 68;
			column_list();
			State = 69;
			Match(FROM);
			State = 70;
			table_source();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 71;
				where_clause();
				}
			}

			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 74;
				order_by_clause();
				}
			}

			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 77;
				limit_clause();
				}
			}

			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 80;
				Match(SEMI);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourceContext : ParserRuleContext {
		public IToken table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTable_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTable_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourceContext table_source() {
		Table_sourceContext _localctx = new Table_sourceContext(Context, State);
		EnterRule(_localctx, 8, RULE_table_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_localctx.table_name = Match(ID);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60817408L) != 0)) {
				{
				{
				State = 84;
				join_clause();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public IToken join_table;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(SqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(SqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Join_operatorContext join_operator() {
			return GetRuleContext<Join_operatorContext>(0);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 58720256L) != 0)) {
				{
				State = 90;
				join_operator();
				}
			}

			State = 93;
			Match(JOIN);
			State = 94;
			_localctx.join_table = Match(ID);
			State = 95;
			Match(ON);
			State = 96;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(SqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(SqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(SqlParser.INNER, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_join_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 58720256L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_statementContext : ParserRuleContext {
		public IToken table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(SqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SqlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionsContext column_definitions() {
			return GetRuleContext<Column_definitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SqlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(SqlParser.SEMI, 0); }
		public Create_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCreate_table_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCreate_table_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_statementContext create_table_statement() {
		Create_table_statementContext _localctx = new Create_table_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_create_table_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(CREATE);
			State = 101;
			Match(TABLE);
			State = 102;
			_localctx.table_name = Match(ID);
			State = 103;
			Match(LPAREN);
			State = 104;
			column_definitions();
			State = 105;
			Match(RPAREN);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 106;
				Match(SEMI);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_statementContext : ParserRuleContext {
		public IToken table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(SqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(SqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(SqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(SqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(SqlParser.SEMI, 0); }
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDrop_table_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDrop_table_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_statementContext drop_table_statement() {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_drop_table_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(DROP);
			State = 110;
			Match(TABLE);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 111;
				Match(IF);
				State = 112;
				Match(EXISTS);
				}
			}

			State = 115;
			_localctx.table_name = Match(ID);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 116;
				Match(SEMI);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(SqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(WHERE);
			State = 120;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public IToken column_name;
		public IToken direction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(SqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(SqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(SqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(SqlParser.DESC, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_order_by_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(ORDER);
			State = 123;
			Match(BY);
			State = 124;
			_localctx.column_name = Match(ID);
			State = 127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC:
				{
				State = 125;
				_localctx.direction = Match(ASC);
				}
				break;
			case DESC:
				{
				State = 126;
				_localctx.direction = Match(DESC);
				}
				break;
			case Eof:
			case LIMIT:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		public IToken amount;
		public IToken offset;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(SqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(SqlParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(SqlParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(SqlParser.OFFSET, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(Context, State);
		EnterRule(_localctx, 22, RULE_limit_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(LIMIT);
			State = 130;
			_localctx.amount = Match(NUMBER);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFSET) {
				{
				State = 131;
				Match(OFFSET);
				State = 132;
				_localctx.offset = Match(NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedBooleanContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public NestedBooleanContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterNestedBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitNestedBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public Boolean_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public LogicalOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterLogicalOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitLogicalOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NestedBooleanContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 136;
			boolean_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 143;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrContext(new ExpressionContext(_parentctx, _parentState));
					((LogicalOrContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 138;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 139;
					((LogicalOrContext)_localctx).op = Match(OR);
					State = 140;
					((LogicalOrContext)_localctx).right = boolean_expression(0);
					}
					} 
				}
				State = 145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Boolean_expressionContext : ParserRuleContext {
		public Boolean_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_expression; } }
	 
		public Boolean_expressionContext() { }
		public virtual void CopyFrom(Boolean_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalAndContext : Boolean_expressionContext {
		public Boolean_expressionContext left;
		public IToken op;
		public Comparison_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public LogicalAndContext(Boolean_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterLogicalAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitLogicalAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedComparisonContext : Boolean_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public NestedComparisonContext(Boolean_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterNestedComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitNestedComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_expressionContext boolean_expression() {
		return boolean_expression(0);
	}

	private Boolean_expressionContext boolean_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Boolean_expressionContext _localctx = new Boolean_expressionContext(Context, _parentState);
		Boolean_expressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_boolean_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NestedComparisonContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 147;
			comparison_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndContext(new Boolean_expressionContext(_parentctx, _parentState));
					((LogicalAndContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_boolean_expression);
					State = 149;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 150;
					((LogicalAndContext)_localctx).op = Match(AND);
					State = 151;
					((LogicalAndContext)_localctx).right = comparison_expression();
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
	 
		public Comparison_expressionContext() { }
		public virtual void CopyFrom(Comparison_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComparisonContext : Comparison_expressionContext {
		public Additive_expressionContext left;
		public IToken op;
		public Additive_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(SqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(SqlParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(SqlParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(SqlParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(SqlParser.LTE, 0); }
		public ComparisonContext(Comparison_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedAdditiveContext : Comparison_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		public NestedAdditiveContext(Comparison_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterNestedAdditive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitNestedAdditive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_comparison_expression);
		int _la;
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new ComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				((ComparisonContext)_localctx).left = additive_expression(0);
				State = 158;
				((ComparisonContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2080374784L) != 0)) ) {
					((ComparisonContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 159;
				((ComparisonContext)_localctx).right = additive_expression(0);
				}
				break;
			case 2:
				_localctx = new NestedAdditiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				additive_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
	 
		public Additive_expressionContext() { }
		public virtual void CopyFrom(Additive_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : Additive_expressionContext {
		public Additive_expressionContext left;
		public IToken op;
		public Multiplicative_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(SqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(SqlParser.MINUS, 0); }
		public AddContext(Additive_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedMultiplicativeContext : Additive_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		public NestedMultiplicativeContext(Additive_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterNestedMultiplicative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitNestedMultiplicative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		return additive_expression(0);
	}

	private Additive_expressionContext additive_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, _parentState);
		Additive_expressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_additive_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NestedMultiplicativeContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 165;
			multiplicative_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 172;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AddContext(new Additive_expressionContext(_parentctx, _parentState));
					((AddContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_additive_expression);
					State = 167;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 168;
					((AddContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						((AddContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 169;
					((AddContext)_localctx).right = multiplicative_expression(0);
					}
					} 
				}
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
	 
		public Multiplicative_expressionContext() { }
		public virtual void CopyFrom(Multiplicative_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulContext : Multiplicative_expressionContext {
		public Multiplicative_expressionContext left;
		public IToken op;
		public Primary_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(SqlParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(SqlParser.SLASH, 0); }
		public MulContext(Multiplicative_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedPrimaryContext : Multiplicative_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public NestedPrimaryContext(Multiplicative_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterNestedPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitNestedPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		return multiplicative_expression(0);
	}

	private Multiplicative_expressionContext multiplicative_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, _parentState);
		Multiplicative_expressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_multiplicative_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NestedPrimaryContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 176;
			primary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MulContext(new Multiplicative_expressionContext(_parentctx, _parentState));
					((MulContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_expression);
					State = 178;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 179;
					((MulContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ASTERISK || _la==SLASH) ) {
						((MulContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 180;
					((MulContext)_localctx).right = primary_expression();
					}
					} 
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
	 
		public Primary_expressionContext() { }
		public virtual void CopyFrom(Primary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(SqlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(SqlParser.RPAREN, 0); }
		public ParenthesizedExpressionContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColumnContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqlParser.ID, 0); }
		public ColumnContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralContext : Primary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public LiteralContext(Primary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_primary_expression);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				_localctx = new ParenthesizedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 186;
				Match(LPAREN);
				State = 187;
				expression(0);
				State = 188;
				Match(RPAREN);
				}
				break;
			case STRING_LITERAL:
			case NUMBER:
				_localctx = new LiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 190;
				value();
				}
				break;
			case ID:
				_localctx = new ColumnContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 191;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext[] column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Column_definitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn_definitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn_definitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionsContext column_definitions() {
		Column_definitionsContext _localctx = new Column_definitionsContext(Context, State);
		EnterRule(_localctx, 36, RULE_column_definitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			column_def();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 195;
				Match(COMMA);
				State = 196;
				column_def();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		public IToken column_name;
		public IToken data_type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SqlParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SqlParser.ID, i);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(Context, State);
		EnterRule(_localctx, 38, RULE_column_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_localctx.column_name = Match(ID);
			State = 203;
			_localctx.data_type = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(SqlParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SqlParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SqlParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_listContext column_list() {
		Column_listContext _localctx = new Column_listContext(Context, State);
		EnterRule(_localctx, 40, RULE_column_list);
		int _la;
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASTERISK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				Match(ASTERISK);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				Match(ID);
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 207;
					Match(COMMA);
					State = 208;
					Match(ID);
					}
					}
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SqlParser.COMMA, i);
		}
		public Value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterValue_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitValue_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_listContext value_list() {
		Value_listContext _localctx = new Value_listContext(Context, State);
		EnterRule(_localctx, 42, RULE_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			value();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 217;
				Match(COMMA);
				State = 218;
				value();
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(SqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(SqlParser.NUMBER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LITERAL || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 13: return boolean_expression_sempred((Boolean_expressionContext)_localctx, predIndex);
		case 15: return additive_expression_sempred((Additive_expressionContext)_localctx, predIndex);
		case 16: return multiplicative_expression_sempred((Multiplicative_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool boolean_expression_sempred(Boolean_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool additive_expression_sempred(Additive_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multiplicative_expression_sempred(Multiplicative_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,42,227,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,1,0,1,0,1,1,1,1,1,1,1,1,3,1,53,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,66,8,2,1,3,1,3,1,3,1,3,1,3,3,3,73,8,3,1,3,3,3,76,
		8,3,1,3,3,3,79,8,3,1,3,3,3,82,8,3,1,4,1,4,5,4,86,8,4,10,4,12,4,89,9,4,
		1,5,3,5,92,8,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		3,7,108,8,7,1,8,1,8,1,8,1,8,3,8,114,8,8,1,8,1,8,3,8,118,8,8,1,9,1,9,1,
		9,1,10,1,10,1,10,1,10,1,10,3,10,128,8,10,1,11,1,11,1,11,1,11,3,11,134,
		8,11,1,12,1,12,1,12,1,12,1,12,1,12,5,12,142,8,12,10,12,12,12,145,9,12,
		1,13,1,13,1,13,1,13,1,13,1,13,5,13,153,8,13,10,13,12,13,156,9,13,1,14,
		1,14,1,14,1,14,1,14,3,14,163,8,14,1,15,1,15,1,15,1,15,1,15,1,15,5,15,171,
		8,15,10,15,12,15,174,9,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,182,8,16,
		10,16,12,16,185,9,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,193,8,17,1,18,
		1,18,1,18,5,18,198,8,18,10,18,12,18,201,9,18,1,19,1,19,1,19,1,20,1,20,
		1,20,1,20,5,20,210,8,20,10,20,12,20,213,9,20,3,20,215,8,20,1,21,1,21,1,
		21,5,21,220,8,21,10,21,12,21,223,9,21,1,22,1,22,1,22,0,4,24,26,30,32,23,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,0,5,1,
		0,23,25,1,0,26,30,1,0,31,32,2,0,14,14,33,33,1,0,35,36,230,0,46,1,0,0,0,
		2,52,1,0,0,0,4,54,1,0,0,0,6,67,1,0,0,0,8,83,1,0,0,0,10,91,1,0,0,0,12,98,
		1,0,0,0,14,100,1,0,0,0,16,109,1,0,0,0,18,119,1,0,0,0,20,122,1,0,0,0,22,
		129,1,0,0,0,24,135,1,0,0,0,26,146,1,0,0,0,28,162,1,0,0,0,30,164,1,0,0,
		0,32,175,1,0,0,0,34,192,1,0,0,0,36,194,1,0,0,0,38,202,1,0,0,0,40,214,1,
		0,0,0,42,216,1,0,0,0,44,224,1,0,0,0,46,47,3,2,1,0,47,1,1,0,0,0,48,53,3,
		4,2,0,49,53,3,6,3,0,50,53,3,14,7,0,51,53,3,16,8,0,52,48,1,0,0,0,52,49,
		1,0,0,0,52,50,1,0,0,0,52,51,1,0,0,0,53,3,1,0,0,0,54,55,5,11,0,0,55,56,
		5,12,0,0,56,57,5,34,0,0,57,58,5,38,0,0,58,59,3,40,20,0,59,60,5,39,0,0,
		60,61,5,13,0,0,61,62,5,38,0,0,62,63,3,42,21,0,63,65,5,39,0,0,64,66,5,40,
		0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,5,1,0,0,0,67,68,5,9,0,0,68,69,3,40,
		20,0,69,70,5,10,0,0,70,72,3,8,4,0,71,73,3,18,9,0,72,71,1,0,0,0,72,73,1,
		0,0,0,73,75,1,0,0,0,74,76,3,20,10,0,75,74,1,0,0,0,75,76,1,0,0,0,76,78,
		1,0,0,0,77,79,3,22,11,0,78,77,1,0,0,0,78,79,1,0,0,0,79,81,1,0,0,0,80,82,
		5,40,0,0,81,80,1,0,0,0,81,82,1,0,0,0,82,7,1,0,0,0,83,87,5,34,0,0,84,86,
		3,10,5,0,85,84,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,9,
		1,0,0,0,89,87,1,0,0,0,90,92,3,12,6,0,91,90,1,0,0,0,91,92,1,0,0,0,92,93,
		1,0,0,0,93,94,5,21,0,0,94,95,5,34,0,0,95,96,5,22,0,0,96,97,3,24,12,0,97,
		11,1,0,0,0,98,99,7,0,0,0,99,13,1,0,0,0,100,101,5,6,0,0,101,102,5,7,0,0,
		102,103,5,34,0,0,103,104,5,38,0,0,104,105,3,36,18,0,105,107,5,39,0,0,106,
		108,5,40,0,0,107,106,1,0,0,0,107,108,1,0,0,0,108,15,1,0,0,0,109,110,5,
		8,0,0,110,113,5,7,0,0,111,112,5,15,0,0,112,114,5,16,0,0,113,111,1,0,0,
		0,113,114,1,0,0,0,114,115,1,0,0,0,115,117,5,34,0,0,116,118,5,40,0,0,117,
		116,1,0,0,0,117,118,1,0,0,0,118,17,1,0,0,0,119,120,5,1,0,0,120,121,3,24,
		12,0,121,19,1,0,0,0,122,123,5,2,0,0,123,124,5,3,0,0,124,127,5,34,0,0,125,
		128,5,4,0,0,126,128,5,5,0,0,127,125,1,0,0,0,127,126,1,0,0,0,127,128,1,
		0,0,0,128,21,1,0,0,0,129,130,5,17,0,0,130,133,5,36,0,0,131,132,5,18,0,
		0,132,134,5,36,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,23,1,0,0,0,135,
		136,6,12,-1,0,136,137,3,26,13,0,137,143,1,0,0,0,138,139,10,2,0,0,139,140,
		5,20,0,0,140,142,3,26,13,0,141,138,1,0,0,0,142,145,1,0,0,0,143,141,1,0,
		0,0,143,144,1,0,0,0,144,25,1,0,0,0,145,143,1,0,0,0,146,147,6,13,-1,0,147,
		148,3,28,14,0,148,154,1,0,0,0,149,150,10,2,0,0,150,151,5,19,0,0,151,153,
		3,28,14,0,152,149,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,
		0,0,155,27,1,0,0,0,156,154,1,0,0,0,157,158,3,30,15,0,158,159,7,1,0,0,159,
		160,3,30,15,0,160,163,1,0,0,0,161,163,3,30,15,0,162,157,1,0,0,0,162,161,
		1,0,0,0,163,29,1,0,0,0,164,165,6,15,-1,0,165,166,3,32,16,0,166,172,1,0,
		0,0,167,168,10,2,0,0,168,169,7,2,0,0,169,171,3,32,16,0,170,167,1,0,0,0,
		171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,31,1,0,0,0,174,172,
		1,0,0,0,175,176,6,16,-1,0,176,177,3,34,17,0,177,183,1,0,0,0,178,179,10,
		2,0,0,179,180,7,3,0,0,180,182,3,34,17,0,181,178,1,0,0,0,182,185,1,0,0,
		0,183,181,1,0,0,0,183,184,1,0,0,0,184,33,1,0,0,0,185,183,1,0,0,0,186,187,
		5,38,0,0,187,188,3,24,12,0,188,189,5,39,0,0,189,193,1,0,0,0,190,193,3,
		44,22,0,191,193,5,34,0,0,192,186,1,0,0,0,192,190,1,0,0,0,192,191,1,0,0,
		0,193,35,1,0,0,0,194,199,3,38,19,0,195,196,5,37,0,0,196,198,3,38,19,0,
		197,195,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,37,
		1,0,0,0,201,199,1,0,0,0,202,203,5,34,0,0,203,204,5,34,0,0,204,39,1,0,0,
		0,205,215,5,14,0,0,206,211,5,34,0,0,207,208,5,37,0,0,208,210,5,34,0,0,
		209,207,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,215,
		1,0,0,0,213,211,1,0,0,0,214,205,1,0,0,0,214,206,1,0,0,0,215,41,1,0,0,0,
		216,221,3,44,22,0,217,218,5,37,0,0,218,220,3,44,22,0,219,217,1,0,0,0,220,
		223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,43,1,0,0,0,223,221,1,0,
		0,0,224,225,7,4,0,0,225,45,1,0,0,0,23,52,65,72,75,78,81,87,91,107,113,
		117,127,133,143,154,162,172,183,192,199,211,214,221
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace QoreDB.QueryEngine.Parser.Antlr
