//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from QoreDB/QueryEngine/Parser/Sql.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QoreDB.QueryEngine.Parser.Antlr {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISqlListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class SqlBaseListener : ISqlListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRoot([NotNull] SqlParser.RootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRoot([NotNull] SqlParser.RootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] SqlParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] SqlParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.insert_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInsert_statement([NotNull] SqlParser.Insert_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.insert_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInsert_statement([NotNull] SqlParser.Insert_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.select_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSelect_statement([NotNull] SqlParser.Select_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.select_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSelect_statement([NotNull] SqlParser.Select_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.table_source"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTable_source([NotNull] SqlParser.Table_sourceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.table_source"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTable_source([NotNull] SqlParser.Table_sourceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterJoin_clause([NotNull] SqlParser.Join_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitJoin_clause([NotNull] SqlParser.Join_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.join_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterJoin_operator([NotNull] SqlParser.Join_operatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.join_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitJoin_operator([NotNull] SqlParser.Join_operatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.create_table_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCreate_table_statement([NotNull] SqlParser.Create_table_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.create_table_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCreate_table_statement([NotNull] SqlParser.Create_table_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.drop_table_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDrop_table_statement([NotNull] SqlParser.Drop_table_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.drop_table_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDrop_table_statement([NotNull] SqlParser.Drop_table_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.where_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhere_clause([NotNull] SqlParser.Where_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.where_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhere_clause([NotNull] SqlParser.Where_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.order_by_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrder_by_clause([NotNull] SqlParser.Order_by_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.order_by_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrder_by_clause([NotNull] SqlParser.Order_by_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.limit_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLimit_clause([NotNull] SqlParser.Limit_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.limit_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLimit_clause([NotNull] SqlParser.Limit_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedBoolean</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNestedBoolean([NotNull] SqlParser.NestedBooleanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedBoolean</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNestedBoolean([NotNull] SqlParser.NestedBooleanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOr([NotNull] SqlParser.LogicalOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOr([NotNull] SqlParser.LogicalOrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="SqlParser.boolean_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalAnd([NotNull] SqlParser.LogicalAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="SqlParser.boolean_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalAnd([NotNull] SqlParser.LogicalAndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedComparison</c>
	/// labeled alternative in <see cref="SqlParser.boolean_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNestedComparison([NotNull] SqlParser.NestedComparisonContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedComparison</c>
	/// labeled alternative in <see cref="SqlParser.boolean_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNestedComparison([NotNull] SqlParser.NestedComparisonContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Comparison</c>
	/// labeled alternative in <see cref="SqlParser.comparison_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparison([NotNull] SqlParser.ComparisonContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Comparison</c>
	/// labeled alternative in <see cref="SqlParser.comparison_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparison([NotNull] SqlParser.ComparisonContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedAdditive</c>
	/// labeled alternative in <see cref="SqlParser.comparison_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNestedAdditive([NotNull] SqlParser.NestedAdditiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedAdditive</c>
	/// labeled alternative in <see cref="SqlParser.comparison_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNestedAdditive([NotNull] SqlParser.NestedAdditiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="SqlParser.additive_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdd([NotNull] SqlParser.AddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="SqlParser.additive_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdd([NotNull] SqlParser.AddContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedMultiplicative</c>
	/// labeled alternative in <see cref="SqlParser.additive_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNestedMultiplicative([NotNull] SqlParser.NestedMultiplicativeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedMultiplicative</c>
	/// labeled alternative in <see cref="SqlParser.additive_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNestedMultiplicative([NotNull] SqlParser.NestedMultiplicativeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Mul</c>
	/// labeled alternative in <see cref="SqlParser.multiplicative_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMul([NotNull] SqlParser.MulContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Mul</c>
	/// labeled alternative in <see cref="SqlParser.multiplicative_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMul([NotNull] SqlParser.MulContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedPrimary</c>
	/// labeled alternative in <see cref="SqlParser.multiplicative_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNestedPrimary([NotNull] SqlParser.NestedPrimaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedPrimary</c>
	/// labeled alternative in <see cref="SqlParser.multiplicative_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNestedPrimary([NotNull] SqlParser.NestedPrimaryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesizedExpression([NotNull] SqlParser.ParenthesizedExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesizedExpression([NotNull] SqlParser.ParenthesizedExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] SqlParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] SqlParser.LiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Column</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColumn([NotNull] SqlParser.ColumnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Column</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColumn([NotNull] SqlParser.ColumnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.column_definitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColumn_definitions([NotNull] SqlParser.Column_definitionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.column_definitions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColumn_definitions([NotNull] SqlParser.Column_definitionsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.column_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColumn_def([NotNull] SqlParser.Column_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.column_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColumn_def([NotNull] SqlParser.Column_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.column_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColumn_list([NotNull] SqlParser.Column_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.column_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColumn_list([NotNull] SqlParser.Column_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.value_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValue_list([NotNull] SqlParser.Value_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.value_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValue_list([NotNull] SqlParser.Value_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValue([NotNull] SqlParser.ValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValue([NotNull] SqlParser.ValueContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace QoreDB.QueryEngine.Parser.Antlr
