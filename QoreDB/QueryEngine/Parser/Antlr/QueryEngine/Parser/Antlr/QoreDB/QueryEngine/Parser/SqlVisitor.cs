//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from QoreDB/QueryEngine/Parser/Sql.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QoreDB.QueryEngine.Parser.Antlr {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="SqlParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface ISqlVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRoot([NotNull] SqlParser.RootContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] SqlParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.insert_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInsert_statement([NotNull] SqlParser.Insert_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.select_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSelect_statement([NotNull] SqlParser.Select_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.table_source"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTable_source([NotNull] SqlParser.Table_sourceContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitJoin_clause([NotNull] SqlParser.Join_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.join_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitJoin_operator([NotNull] SqlParser.Join_operatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.create_table_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCreate_table_statement([NotNull] SqlParser.Create_table_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.drop_table_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDrop_table_statement([NotNull] SqlParser.Drop_table_statementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.where_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhere_clause([NotNull] SqlParser.Where_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.order_by_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrder_by_clause([NotNull] SqlParser.Order_by_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.limit_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLimit_clause([NotNull] SqlParser.Limit_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NestedBoolean</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNestedBoolean([NotNull] SqlParser.NestedBooleanContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOr([NotNull] SqlParser.LogicalOrContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="SqlParser.boolean_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalAnd([NotNull] SqlParser.LogicalAndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NestedComparison</c>
	/// labeled alternative in <see cref="SqlParser.boolean_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNestedComparison([NotNull] SqlParser.NestedComparisonContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Comparison</c>
	/// labeled alternative in <see cref="SqlParser.comparison_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparison([NotNull] SqlParser.ComparisonContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NestedAdditive</c>
	/// labeled alternative in <see cref="SqlParser.comparison_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNestedAdditive([NotNull] SqlParser.NestedAdditiveContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="SqlParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdd([NotNull] SqlParser.AddContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NestedMultiplicative</c>
	/// labeled alternative in <see cref="SqlParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNestedMultiplicative([NotNull] SqlParser.NestedMultiplicativeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Mul</c>
	/// labeled alternative in <see cref="SqlParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMul([NotNull] SqlParser.MulContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NestedPrimary</c>
	/// labeled alternative in <see cref="SqlParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNestedPrimary([NotNull] SqlParser.NestedPrimaryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpression([NotNull] SqlParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] SqlParser.LiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Column</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitColumn([NotNull] SqlParser.ColumnContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.column_definitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitColumn_definitions([NotNull] SqlParser.Column_definitionsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.column_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitColumn_def([NotNull] SqlParser.Column_defContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.column_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitColumn_list([NotNull] SqlParser.Column_listContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.value_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValue_list([NotNull] SqlParser.Value_listContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="SqlParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValue([NotNull] SqlParser.ValueContext context);
}
} // namespace QoreDB.QueryEngine.Parser.Antlr
