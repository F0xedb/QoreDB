//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from QoreDB/QueryEngine/Parser/Sql.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QoreDB.QueryEngine.Parser.Antlr {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="SqlParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface ISqlListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRoot([NotNull] SqlParser.RootContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRoot([NotNull] SqlParser.RootContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] SqlParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] SqlParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.insert_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInsert_statement([NotNull] SqlParser.Insert_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.insert_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInsert_statement([NotNull] SqlParser.Insert_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.select_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelect_statement([NotNull] SqlParser.Select_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.select_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelect_statement([NotNull] SqlParser.Select_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.table_source"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTable_source([NotNull] SqlParser.Table_sourceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.table_source"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTable_source([NotNull] SqlParser.Table_sourceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJoin_clause([NotNull] SqlParser.Join_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJoin_clause([NotNull] SqlParser.Join_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.join_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJoin_operator([NotNull] SqlParser.Join_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.join_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJoin_operator([NotNull] SqlParser.Join_operatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.create_table_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCreate_table_statement([NotNull] SqlParser.Create_table_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.create_table_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCreate_table_statement([NotNull] SqlParser.Create_table_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.drop_table_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDrop_table_statement([NotNull] SqlParser.Drop_table_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.drop_table_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDrop_table_statement([NotNull] SqlParser.Drop_table_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.where_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhere_clause([NotNull] SqlParser.Where_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.where_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhere_clause([NotNull] SqlParser.Where_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.order_by_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrder_by_clause([NotNull] SqlParser.Order_by_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.order_by_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrder_by_clause([NotNull] SqlParser.Order_by_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.limit_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLimit_clause([NotNull] SqlParser.Limit_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.limit_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLimit_clause([NotNull] SqlParser.Limit_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedBoolean</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNestedBoolean([NotNull] SqlParser.NestedBooleanContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedBoolean</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNestedBoolean([NotNull] SqlParser.NestedBooleanContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOr([NotNull] SqlParser.LogicalOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="SqlParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOr([NotNull] SqlParser.LogicalOrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="SqlParser.boolean_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAnd([NotNull] SqlParser.LogicalAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="SqlParser.boolean_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAnd([NotNull] SqlParser.LogicalAndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedComparison</c>
	/// labeled alternative in <see cref="SqlParser.boolean_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNestedComparison([NotNull] SqlParser.NestedComparisonContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedComparison</c>
	/// labeled alternative in <see cref="SqlParser.boolean_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNestedComparison([NotNull] SqlParser.NestedComparisonContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Comparison</c>
	/// labeled alternative in <see cref="SqlParser.comparison_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparison([NotNull] SqlParser.ComparisonContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Comparison</c>
	/// labeled alternative in <see cref="SqlParser.comparison_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparison([NotNull] SqlParser.ComparisonContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedAdditive</c>
	/// labeled alternative in <see cref="SqlParser.comparison_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNestedAdditive([NotNull] SqlParser.NestedAdditiveContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedAdditive</c>
	/// labeled alternative in <see cref="SqlParser.comparison_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNestedAdditive([NotNull] SqlParser.NestedAdditiveContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="SqlParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdd([NotNull] SqlParser.AddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="SqlParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdd([NotNull] SqlParser.AddContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedMultiplicative</c>
	/// labeled alternative in <see cref="SqlParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNestedMultiplicative([NotNull] SqlParser.NestedMultiplicativeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedMultiplicative</c>
	/// labeled alternative in <see cref="SqlParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNestedMultiplicative([NotNull] SqlParser.NestedMultiplicativeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Mul</c>
	/// labeled alternative in <see cref="SqlParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMul([NotNull] SqlParser.MulContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Mul</c>
	/// labeled alternative in <see cref="SqlParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMul([NotNull] SqlParser.MulContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NestedPrimary</c>
	/// labeled alternative in <see cref="SqlParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNestedPrimary([NotNull] SqlParser.NestedPrimaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NestedPrimary</c>
	/// labeled alternative in <see cref="SqlParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNestedPrimary([NotNull] SqlParser.NestedPrimaryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] SqlParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] SqlParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] SqlParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] SqlParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Column</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumn([NotNull] SqlParser.ColumnContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Column</c>
	/// labeled alternative in <see cref="SqlParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumn([NotNull] SqlParser.ColumnContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.column_definitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumn_definitions([NotNull] SqlParser.Column_definitionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.column_definitions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumn_definitions([NotNull] SqlParser.Column_definitionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.column_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumn_def([NotNull] SqlParser.Column_defContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.column_def"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumn_def([NotNull] SqlParser.Column_defContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.column_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumn_list([NotNull] SqlParser.Column_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.column_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumn_list([NotNull] SqlParser.Column_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.value_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue_list([NotNull] SqlParser.Value_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.value_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue_list([NotNull] SqlParser.Value_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SqlParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue([NotNull] SqlParser.ValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SqlParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue([NotNull] SqlParser.ValueContext context);
}
} // namespace QoreDB.QueryEngine.Parser.Antlr
